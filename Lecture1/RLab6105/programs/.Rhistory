log.male.earnings = log(male.earnings)
par(mfrow = c(2,2))
qqnorm(male.earnings, datax = T, main = "untransformed")
qqnorm(sqrt.male.earnings, datax = T, main = "sqrt")
qqnorm(log.male.earnings, datax = T, main = "log")
par(mfrow = c(2, 2))
boxplot(male.earnings, main = "untransformed")
boxplot(sqrt.male.earnings, main = "sqrt")
boxplot(log.male.earnings, main = "log")
par(mfrow = c(2, 2))
plot(density(male.earnings), main = "untransformed")
plot(density(sqrt.male.earnings), main = "sqrt")
plot(density(log.male.earnings), main = "log")
#install.packages('MASS')
library("MASS")
boxcox(male.earning~1, lambda = seq(.3, .45, 1/100))
bc = boxcox(male.earning~1, lambda = seq(.3, .45, 1/100), interp = F)
ind = (bc$y == max(bc$y))
ind2 = (bc$y > max(bc$y) - qchisq(.95, df = 1)/2)
bc$x[ind]
bc$x[ind2]
#install.packages('fGarch')
library("fGarch")
fit = sstdFit(male.earnings, hessian = T)
shiny::runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/basic-insurer-dashboard')
install.packages("highstarter")
install.packages("highcharter")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/basic-insurer-dashboard')
install.packages("shinyWidgets")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/basic-insurer-dashboard')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/basic-insurer-dashboard')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/bootstrap-claims-sim')
install.packages("rhandsontable")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/bootstrap-claims-sim')
install.packages("shinycssloaders")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/bootstrap-claims-sim')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
install.packages("shinythemes")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
install.packages("actuar")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
install.packages("rintrojs")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
install.packages("tychobratools")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
install.packages("tychobratools")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/freq-sev-claims-sim')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
install.packages("tychobratools")
install.packages("devtools")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/interest-rate-walk')
install.packages("tychobratools")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/medicare-map')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/medicare-map')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/parallelogram-method')
install.packages("shinyjs")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/parallelogram-method')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/parallelogram-method')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/wc-pm-dashboard')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/wc-pm-dashboard')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/wc-pm-dashboard')
install.packages("githubinstall")
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/wc-pm-dashboard')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/wc-pm-dashboard')
runApp('C:/Users/JAINHEMANT/Downloads/shiny-insurance-examples-master/shiny-insurance-examples-master/wc-pm-dashboard')
install_from_swirl("R Programming")
install_from_swirl("R Programming")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
Sys.Date()
mean(c(2,4,5))
submit()
submit()
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
num%%divisor
submit()
submit()
submit()
submit()
num%%divisor
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2
)
args(remainder)
subm
submit()
evaluate(c(1.4, 3.6, 7.9, 8.8))
func( c(1.4, 3.6, 7.9, 8.8))
evaluate(sd,c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
telegram()
test_func5()
telegram <- function(...){
}
submit()
telegram()
submit
submit()
telegram("Good", "morning")
submit()
expr_uses_func('telegram')
test_func5()
telegram()
submit
submit()
telegram("Hello")
telegram("Hello","Morn")
submit()
telegram(c("Hello", "world", ",", "how", "are", "we", "today", "?"))
submit()
play()
telegram("Good", "morning")
telegram(c("Good", "morning"))
nxt()
submit()
mad_libs(place = London, adjustive = "beautiful", noun = "dog")
mad_libs(place = "London", adjustive = "beautiful", noun = "dog")
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class()
class(d1)
unclass(d1)
print(d1)
d
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
t2 <-as.Date("1969-01-01")
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986
| 08:24"
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?apply
play()
class(cls_list)
nxt()
nxt()
?sapply()
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
apply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
vapply(flags, class, character(1))
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(names)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- sample(1, 100, replace = TRUE, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
exit(0)
exit()
swirl()
d1 <- Sys.Date()
class(d1)
exit(0)
exit9
exit()
swirl()
data(cars)
help(cars)
head(cars)
plot(cars)
help(plot())
help(plot)
plot(cars$speed,cars$dist)
plot(cars$dist,cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", title = "My Plot")
plot(cars, main = "My Plot")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, sub = "My Plot Subtitle")
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
load(mtcars)
data(mtcars)
boxplot()
boxplot(mtcars)
?boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist()
hist(mtcars)
hist(mtcars$mpg)
#loading keras library
library(keras)
#loading keras library
library(keras)
#loading keras library
library(keras)
install.packages("keras")
install.packages("WDI")
write.csv(indicator1, file = "indicator1.csv",row.names=FALSE)
library(WDI)
indicator1 <- WDI(country="all", indicator=c("NY.GDP.PCAP.CD", "IC.REG.COST.PC.ZS", "IC.REG.PROC", "IC.TAX.TOTL.CP.ZS", "IC.TAX.DURS", "IC.BUS.EASE.XQ"),
start=2016, end=2016)
colnames(indicator1) <- c("code","country","year", "GDP_per_capita", "Cost_start_Bus", "Days_reg_bus", "Bus_tax_rate", "Hours_do_tax", "Ease_Bus")
write.csv(indicator1, file = "indicator1.csv",row.names=FALSE)
# OopDemo.R
# R 3.3.2
# S4 OOP
Person = setClass(
"Person",
slots = c(
empID = "integer",
lastName = "character",
hireDate = "character",
payRate = "numeric"
)
)
setMethod(f="initialize", signature="Person",
definition=function(.Object) {
.Object@empID <- as.integer(-1)
.Object@lastName <- "NONAME"
.Object@hireDate <- "1990-01-01"
.Object@payRate <- 0.01
return(.Object)
}
)
setGeneric(name="display", def=function(obj) {
standardGeneric("display")
}
)
setMethod(f="display", signature="Person",
definition=function(obj) {
cat("Employee ID :", obj@empID, "\n")
cat("Last Name   :", obj@lastName, "\n")
cat("Hire Date   :", obj@hireDate, "\n")
cat("Pay Rate    : $", obj@payRate, "\n\n")
}
)
setGeneric(name="yearsService", def=function(obj) {
standardGeneric("yearsService")
}
)
setMethod(f="yearsService", signature="Person",
definition=function(obj) {
hd <- as.POSIXlt(obj@hireDate)
today <- as.POSIXlt(Sys.Date())
yrs <- today$year - hd$year
if (today$mon < hd$mon || (today$mon == hd$mon &&
today$mday < hd$mday)) {
yrs <- yrs - 1
}
return(yrs)
}
)
# ==
cat("\nBegin OOP with S4 demo \n\n")
cat("Creating Person p1 with initialize() values \n\n")
p1 <- new("Person")  # could use p1 <- Person()
display(p1)  # could use print(p1)
cat("Setting p1 fields directly \n\n")
p1@empID <- as.integer(65565)
p1@lastName <- "Adams"
p1@hireDate <- "2010-09-15"
p1@payRate <- 43.21
display(p1)
cat("Calling yearsService() \n\n")
tenure <- yearsService(p1)
cat("Person p1 tenure = ", tenure, " years \n")
cat("Making a value-copy of p1 using '<-' \n\n")
p2 <- p1
cat("\nEnd OOP with S4 demo \n\n")
# OopDemo.R
# R 3.3.2
# S4 OOP
Person = setClass(
"Person",
slots = c(
empID = "integer",
lastName = "character",
hireDate = "character",
payRate = "numeric"
)
)
setMethod(f="initialize", signature="Person",
definition=function(.Object) {
.Object@empID <- as.integer(-1)
.Object@lastName <- "NONAME"
.Object@hireDate <- "1990-01-01"
.Object@payRate <- 0.01
return(.Object)
}
)
setGeneric(name="display", def=function(obj) {
standardGeneric("display")
}
)
setMethod(f="display", signature="Person",
definition=function(obj) {
cat("Employee ID :", obj@empID, "\n")
cat("Last Name   :", obj@lastName, "\n")
cat("Hire Date   :", obj@hireDate, "\n")
cat("Pay Rate    : $", obj@payRate, "\n\n")
}
)
setGeneric(name="yearsService", def=function(obj) {
standardGeneric("yearsService")
}
)
setMethod(f="yearsService", signature="Person",
definition=function(obj) {
hd <- as.POSIXlt(obj@hireDate)
today <- as.POSIXlt(Sys.Date())
yrs <- today$year - hd$year
if (today$mon < hd$mon || (today$mon == hd$mon &&
today$mday < hd$mday)) {
yrs <- yrs - 1
}
return(yrs)
}
)
# ==
cat("\nBegin OOP with S4 demo \n\n")
cat("Creating Person p1 with initialize() values \n\n")
p1 <- new("Person")  # could use p1 <- Person()
display(p1)  # could use print(p1)
cat("Setting p1 fields directly \n\n")
p1@empID <- as.integer(65565)
p1@lastName <- "Adams"
p1@hireDate <- "2010-09-15"
p1@payRate <- 43.21
display(p1)
cat("Calling yearsService() \n\n")
tenure <- yearsService(p1)
cat("Person p1 tenure = ", tenure, " years \n")
cat("Making a value-copy of p1 using '<-' \n\n")
p2 <- p1
cat("\nEnd OOP with S4 demo \n\n")
# S4 OOP
Person = setClass(
"Person",
slots = c(
empID = "integer",
lastName = "character",
hireDate = "character",
payRate = "numeric"
)
)
setMethod(f="initialize", signature="Person",
definition=function(.Object) {
.Object@empID <- as.integer(-1)
.Object@lastName <- "NONAME"
.Object@hireDate <- "1990-01-01"
.Object@payRate <- 0.01
return(.Object)
}
)
setGeneric(name="display", def=function(obj) {
standardGeneric("display")
}
)
setMethod(f="display", signature="Person",
definition=function(obj) {
cat("Employee ID :", obj@empID, "\n")
cat("Last Name   :", obj@lastName, "\n")
cat("Hire Date   :", obj@hireDate, "\n")
cat("Pay Rate    : $", obj@payRate, "\n\n")
}
)
setGeneric(name="yearsService", def=function(obj) {
standardGeneric("yearsService")
}
)
setMethod(f="yearsService", signature="Person",
definition=function(obj) {
hd <- as.POSIXlt(obj@hireDate)
today <- as.POSIXlt(Sys.Date())
yrs <- today$year - hd$year
if (today$mon < hd$mon || (today$mon == hd$mon &&
today$mday < hd$mday)) {
yrs <- yrs - 1
}
return(yrs)
}
)
cat("\nBegin OOP with S4 demo \n\n")
cat("Creating Person p1 with initialize() values \n\n")
p1 <- new("Person")  # could use p1 <- Person()
display(p1)  # could use print(p1)
cat("Setting p1 fields directly \n\n")
p1@empID <- as.integer(65565)
cat("Calling yearsService() \n\n")
tenure <- yearsService(p1)
cat("Person p1 tenure = ", tenure, " years \n")
cat("Making a value-copy of p1 using '<-' \n\n")
p2 <- p1
cat("\nEnd OOP with S4 demo \n\n")
setwd("M:/NEU folder/Data Science/Lecture1/RLab6105/programs")
getwd()
setwd("M:/NEU folder/Data Science/Lecture1/RLab6105/programs")
getwd()
